// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // PARTS:
    // ALU
      // ALU(x= ,y= ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out= ,zr= ,ng= )
    // 2 Registers
      // Register(in= ,load= ,out= )
    // ProgramCounter
      // PC(in= ,load= ,inc= ,reset= ,out= )


    // instruction[15] is out op-code
    // instruction[12] is a in comp sequence
    
    // A Instruction
    // op-code = 0, if notop, a instruction
    Not(in=instruction[15], out=notop);
    // M1
    // If it's an "a-instruction"
    // put the instruction in the "A register"
    Mux16(a=aluout, b=instruction, sel=notop, out=m1out);
    // instruciton[5]
    // does instruction pertain to A instruction
    Or(a=notop, b=instruction[5], out=ainstruction);
    // A Register
    ARegister(in=m1out, load=ainstruction, out=aregister);

    // M2
    // Multiplexor for inM and A Register
    // DO we use contents of A register or inM for ALU data
    // beginning of comp sequence, "a" bit.
    // out = "a or m"
    Mux16(a=aregister, b=inM, sel=instruction[12], out=aorm); // Goes to ALU

    ALU(x=, y=aorm, zx=, nx=, zy=, ny=, f=, no=, out=, zr=, ng=);
    // Thinking all of ALU's input are read from parsing
    // instruction bit sequence


}
